server: 
  undertow: 
    max-http-post-size: 0 
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可
    io-threads: 4
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8
    worker-threads: 32
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
#   buffers-per-region: 1024 # 这个参数不需要写了
# 是否分配的直接内存
    direct-buffers: true
   
token:
  expire-time: 259200000
mobile:
  expire-time: 120    
eureka:
  client:
    healthcheck:
      enabled: true
feign:  
  hystrix:  
    enabled: true  
ribbon:
  #Ribbon允许最大连接数，即所有后端微服务实例请求并发数之和的最大值。
  MaxTotalConnections: 500
  #单个后端微服务实例能接收的最大请求并发数  
  MaxConnectionsPerHost: 500
  ReadTimeout: 1000
  ConnectTimeout: 1000
  # 关闭Ribbon的重试机制
  MaxAutoRetriesNextServer: 0 #慎用
  
#hystrix 配置
hystrix:
  threadpool:
    default:
      coreSize: 20 #并发执行的最大线程数，默认10
      maxQueueSize: 500 #BlockingQueue的最大队列数，默认值-1
      queueSizeRejectionThreshold: 500 #即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝，默认值5
  command:
    default:
      execution:
        timeout:
        #如果enabled设置为false，则请求超时交给ribbon控制
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 4000

#如果想对单独的某个服务进行详细配置，如下
#poc-customer-service:
#  ribbon:
#    connectTimeout: 5000

redis:
    pool:
         maxActive: 300
         maxIdle: 100
         maxWait: 1000
    host: 192.168.18.150
    port: 6379
    password:
    timeout: 2000
    # 服务或应用名
    sysName: auth-service
    enable: true
    database: 0
  
logging:
  level:
    com.poc: DEBUG
    jdbc.audit: ERROR
    jdbc.resultset: ERROR
    jdbc.sqlonly: ERROR